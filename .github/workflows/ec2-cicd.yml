
name: SFN CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE_NAME: jolri24/soccerback
  EC2_HOST: 13.125.252.116
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  
jobs:

  setting-for-build:
  
    runs-on: ubuntu-latest

    steps:
    - name: Set up application.yml
      run: |
        cd ./soccer/src/main/resources/
        touch ./application-prod.yml
        echo "${{ secrets.APPLICATION }}" > application-prod.yml
    
  build:

    needs: setting-for-build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./soccer/gradlew build -p soccer

    # jop들은 별도의 가상환경에서 작동하므로 job 사이 파일 공유를 위해 jar를 아티팩트로 업로드
    - uses: actions/upload-artifact@v2
      with:
        name: backend
        path: soccer/build/libs/*.jar

  push-docker:

    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download jar artifiact
      uses: actions/download-artifact@v2
      with:
        name: backend
        path: soccer/build/libs

    - name: Build the Docker image
      run: docker build --platform linux/amd64 -t ${{ env.DOCKER_IMAGE_NAME }}:latest ./soccer

    - name: Login to Docker Hub using Access Token
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:

    needs: push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_SSH_USER }}
        key: ${{ env.PRIVATE_KEY }}
        script: |
          CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
          
          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
            sudo docker rm $CONTAINER_ID
          fi
          
          sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          sudo docker run -d -p 8080:8080 ${{ env.DOCKER_IMAGE_NAME }}
